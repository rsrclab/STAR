if (typeof ShopifyAPI === "undefined") {
    ShopifyAPI = {};
}
if (typeof ShopifyCart === "undefined") {
    ShopifyCart = {};
}

function attributeToString(attribute) {
    if (typeof attribute !== "string") {
        attribute += "";
        if (attribute === "undefined") {
            attribute = "";
        }
    }
    return jQuery.trim(attribute);
}
ShopifyAPI.onCartUpdate = function (cart) {};
ShopifyAPI.updateCartNote = function (note, callback) {
    var params = {
        type: "POST",
        url: "/cart/update.js",
        data: "note=" + attributeToString(note),
        dataType: "json",
        success: function (cart) {
            if (typeof callback === "function") {
                callback(cart);
            } else {
                ShopifyAPI.onCartUpdate(cart);
            }
        },
        error: function (XMLHttpRequest, textStatus) {
            ShopifyAPI.onError(XMLHttpRequest, textStatus);
        },
    };
    jQuery.ajax(params);
};
ShopifyAPI.onError = function (XMLHttpRequest, textStatus) {
    var data = eval("(" + XMLHttpRequest.responseText + ")");
    if (!!data.message) {
        alert(data.message + "(" + data.status + "): " + data.description);
    }
};
ShopifyAPI.addItemFromForm = function (form, callback, errorCallback) {
    var params = {
        type: "POST",
        url: "/cart/add.js",
        data: jQuery(form).serialize(),
        dataType: "json",
        beforeSend: function () {
            $("body").addClass("velaCartAdding");
        },
        success: function (line_item) {
            $("body").removeClass("velaCartAdding");
            if (window.ajaxcart_type == "modal") {
                if (line_item.image != null) {
                    $(".headerCartModal").find(".cartProductImage img").attr("src", line_item.image);
                } else {
                    $(".headerCartModal").find(".cartProductImage img").attr("src", "https://via.placeholder.com/100x100");
                }
                $(".headerCartModal").find(".productTitle").html(line_item.title);
                $(".headerCartModal").addClass("active");
            }
            if (typeof callback === "function") {
                callback(line_item, form);
            } else {
                ShopifyAPI.onItemAdded(line_item, form);
            }
        },
        error: function (XMLHttpRequest, textStatus) {
            $("body").removeClass("velaCartAdding");
            if (typeof errorCallback === "function") {
                errorCallback(form, XMLHttpRequest, textStatus);
            } else {
                ShopifyAPI.onError(XMLHttpRequest, textStatus);
            }
        },
    };
    jQuery.ajax(params);
};
ShopifyAPI.getCart = function (callback) {
    jQuery.getJSON("/cart.js", function (cart, textStatus) {

    
        updateCartItemCount(cart);
        ShopifyCart = cart;
        
        
        if (typeof callback === "function") {
            callback(cart);
        } else {
            ShopifyAPI.onCartUpdate(cart);
        }
    });
};
ShopifyAPI.changeItem = function (line, quantity, callback) {
    var params = {
        type: "POST",
        url: "/cart/change.js",
        data: "quantity=" + quantity + "&line=" + line,
        dataType: "json",
        success: function (cart) {
            if (typeof callback === "function") {
                callback(cart);
            } else {
                ShopifyAPI.onCartUpdate(cart);
            }
        },
        error: function (XMLHttpRequest, textStatus) {
            ShopifyAPI.onError(XMLHttpRequest, textStatus);
        },
    };
  
    return jQuery.ajax(params);
};
var ajaxCart = (function (module, $) {
    "use strict";
    var init, loadCart;
    var settings, isUpdating, $body;
    var $formContainer, $addToCart, $cartCountSelector, $cartCostSelector, $cartContainer, $drawerContainer;
    var updateCountPrice, formOverride, itemAddedCallback, itemErrorCallback, cartUpdateCallback, buildCart, cartCallback, adjustCart, adjustCartCallback, createQtySelectors, qtySelectors, validateQty;
    init = function (options) {
        settings = {
            formSelector: 'form[action^="/cart/add"]',
            cartContainer: "#cartContainer",
            addToCartSelector: 'input[type="submit"]',
            cartCountSelector: null,
            cartCostSelector: null,
            moneyFormat: window.money,
            disableAjaxCart: false,
            enableQtySelectors: true,
        };
        $.extend(settings, options);
        $formContainer = $(settings.formSelector);
        $cartContainer = $(settings.cartContainer);
        $addToCart = $formContainer.find(settings.addToCartSelector);
        $cartCountSelector = $(settings.cartCountSelector);
        $cartCostSelector = $(settings.cartCostSelector);
        $body = $("body");
        isUpdating = false;
        if (settings.enableQtySelectors) {
            qtySelectors();
        }
        if (!settings.disableAjaxCart && $addToCart.length) {
            formOverride();
        }
        adjustCart();
    };
    loadCart = function () {
        $body.addClass("ajaxcartIsLoading");
        ShopifyAPI.getCart(cartUpdateCallback);
    };
    updateCountPrice = function (cart) {
       
      
        if ($cartCountSelector) {
            $cartCountSelector.html(cart.item_count).removeClass("hidden-count");
            if (cart.item_count === 0) {
                $cartCountSelector.addClass("hidden-count");
            }
        }
        if ($cartCostSelector) {
            $cartCostSelector.html(Shopify.formatMoney(cart.total_price, settings.moneyFormat));
        }
    };
    formOverride = function () {
        if (window.ajaxcart_type != "page") {
            $formContainer.on("submit", function (evt) {
                evt.preventDefault();
                $addToCart.removeClass("is-added").addClass("is-adding");
                $(".qtyError").remove();
                ShopifyAPI.addItemFromForm(evt.target, itemAddedCallback, itemErrorCallback);
                if ($formContainer.hasClass("formQuickview")) {
                    $("#velaQuickView").fadeOut(500);
                    $(".jsQuickview").html("");
                    $(".jsQuickview").fadeOut(500);
                }
            });
        }
    };
    itemAddedCallback = function (product) {
        $addToCart.removeClass("is-adding").addClass("is-added");
        ShopifyAPI.getCart(cartUpdateCallback);
    };
    itemErrorCallback = function (form, XMLHttpRequest, textStatus) {
        var data = eval("(" + XMLHttpRequest.responseText + ")");
        $addToCart.removeClass("is-adding is-added");
        if (!!data.message) {
            if (data.status == 422) {
                $(form).after('<div class="alert alert-danger qtyError">' + data.description + "</div>");
            }
        }
    };
    cartUpdateCallback = function (cart) {
        updateCountPrice(cart);
        buildCart(cart);
    };
    buildCart = function (cart) {
        $cartContainer.empty();
        if (window.ajaxcart_type == "modal") {
            if (cart.item_count === 0) {
                $cartContainer.append('<div class="headerCartEmpty">' + window.cart_empty + "</div>");
                cartCallback(cart);
                return;
            }
            var items = [],
                item = {},
                data = {},
                source = $("#headerCartTemplate").html(),
                template = Handlebars.compile(source);
            $.each(cart.items, function (index, cartItem) {
                if (cartItem.image != null) {
                    var prodImg = cartItem.image.replace(/(\.[^.]*)$/, "_200x$1").replace("http:", "");
                } else {
                    var prodImg = "//cdn.shopify.com/s/assets/admin/no-image-medium-cc9732cb976dd349a0df1d39816fbcc7.gif";
                }
                
                let plusDiscountString = '';
                cartItem.discounts.forEach((discount, index) => {
                  if (discount.title !== '') {
                    plusDiscountString += discount.title;
                    if (!index === cartItem.discounts.length-1) {
                      plusDiscountString += ', '
                    }
                  }
                })
                const plusOriginalPrice = cartItem.final_price === cartItem.original_price ? '' : Shopify.formatMoney(cartItem.original_price, settings.moneyFormat);

                item = {
                    id: cartItem.variant_id,
                    line: index + 1,
                    indx: cartItem.indx,
                    url: cartItem.url,
                    img: prodImg,
                    name: cartItem.product_title,
                    variation: cartItem.variant_title,
                    properties: cartItem.properties,
                    itemAdd: cartItem.quantity + 1,
                    itemMinus: cartItem.quantity - 1,
                    itemQty: cartItem.quantity,
                    price: Shopify.formatMoney(cartItem.price, settings.moneyFormat),
                    plus_final_price: Shopify.formatMoney(cartItem.final_price, settings.moneyFormat),
                    plus_original_price: plusOriginalPrice,
                    plus_discount_message: plusDiscountString,
                    vendor: cartItem.vendor,
                };
                items.push(item);
            });
          
          
            data = { items: items, note: cart.note, totalPrice: Shopify.formatMoney(cart.total_price, settings.moneyFormat) };
            $cartContainer.append(template(data));
            cartCallback(cart);
        } else {
            if (cart.item_count === 0) {
                $cartContainer.append('<div class="drawerCartEmpty">' + window.cart_empty + "</div>");
                cartCallback(cart);
                return;
            }
            var items = [],
                item = {},
                data = {},
                source = $("#CartTemplate").html(),
                template = Handlebars.compile(source);
            $.each(cart.items, function (index, cartItem) {
                if (cartItem.image != null) {
                    var prodImg = cartItem.image.replace(/(\.[^.]*)$/, "_200x$1").replace("http:", "");
                } else {
                    var prodImg = "//cdn.shopify.com/s/assets/admin/no-image-medium-cc9732cb976dd349a0df1d39816fbcc7.gif";
                }

                let plusDiscountString = '';
                cartItem.discounts.forEach((discount, index) => {
                  if (discount.title !== '') {
                    plusDiscountString += discount.title;
                    if (!index === cartItem.discounts.length-1) {
                      plusDiscountString += ', '
                    }
                  }
                })
                const plusOriginalPrice = cartItem.final_price === cartItem.original_price ? '' : Shopify.formatMoney(cartItem.original_price, settings.moneyFormat);

                item = {
                    id: cartItem.variant_id,
                    line: cartItem.line,
                    indx: cartItem.indx,
                    url: cartItem.url,
                    img: prodImg,
                    name: cartItem.product_title,
                    variation: cartItem.variant_title,
                    properties: cartItem.properties,
                    itemAdd: cartItem.quantity + 1,
                    itemMinus: cartItem.quantity - 1,
                    itemQty: cartItem.quantity,
                    price: Shopify.formatMoney(cartItem.price, settings.moneyFormat),
                    plus_final_price: Shopify.formatMoney(cartItem.final_price, settings.moneyFormat),
                    plus_original_price: plusOriginalPrice,
                    plus_discount_message: plusDiscountString,
                    vendor: cartItem.vendor,
                };
                items.push(item);
            });
            data = { items: items, note: cart.note, totalPrice: Shopify.formatMoney(cart.total_price, settings.moneyFormat) };
            $cartContainer.append(template(data));
            cartCallback(cart);
        }
    };
    cartCallback = function (cart) {
        $body.removeClass("drawerIsLoading");
        $body.trigger("ajaxCart.afterCartLoad", cart);
        if (window.Shopify && Shopify.StorefrontExpressButtons) {
            Shopify.StorefrontExpressButtons.initialize();
        }
    };
    adjustCart = function () {
        $body.on("click", ".qtyAdjust", function () {
            var $el = $(this),
                line = $el.data("line"),
                indx = $el.data("indx"),
                $qtySelector = $el.siblings(".qtyNum"),
                qty = parseInt($qtySelector.val().replace(/\D/g, ""));
            var qty = validateQty(qty);
            if ($el.hasClass("velaQtyPlus")) {
                qty += 1;
            } else {
                qty -= 1;
                if (qty <= 0) qty = 0;
            }
            if (line) {
                updateQuantity(line, indx, qty);
            } else {
                $qtySelector.val(qty);
            }
        });
        $body.on("change", ".qtyNum", function () {
            var $el = $(this),
                line = $el.data("line"),
                indx = $el.data("indx"),
                qty = parseInt($el.val().replace(/\D/g, ""));
            var qty = validateQty(qty);
            if (line) {
                updateQuantity(line, indx, qty);
            }
        });
        $body.on("submit", "form.ajaxcart", function (evt) {
            if (isUpdating) {
                evt.preventDefault();
            }
        });
        $body.on("focus", ".qtyAdjust", function () {
            var $el = $(this);
            setTimeout(function () {
                $el.select();
            }, 50);
        });
        $body.on("click", ".cartRemove", function () {
       
            var $el = $(this),
                line = $el.data("line"),
                indx = $el.data("indx"),
                qty = 0;
            if (line) {
               updateQuantity(line, indx, 0);  
            }
          
        });
        function updateQuantity(line, indx, qty) {
            isUpdating = true;
            var $row = $('.ajaxCartRow[data-line="' + line + '"]').addClass("is-loading");
            if (qty === 0) {
                $row.parent().addClass("is-removed");
            }
            setTimeout(function () {
              const hasConnectedProducts = updateWithConnectedProducts(line, indx, qty, adjustCartCallback);  
                                      
              if(!hasConnectedProducts) {
                 ShopifyAPI.changeItem(line, qty, adjustCartCallback);
              }                                                     
			  
            }, 350);
        }
        $body.on("change", 'textarea[name="note"]', function () {
            var newNote = $(this).val();
            ShopifyAPI.updateCartNote(newNote, function (cart) {});
        });
    };
    adjustCartCallback = function (cart) {
        isUpdating = false;
        updateCountPrice(cart);
        setTimeout(function () {
            ShopifyAPI.getCart(buildCart);
        }, 150);
    };
  
     
    ShopifyAPI.reloadCart = () => ShopifyAPI.getCart(adjustCartCallback);
  
    createQtySelectors = function () {
        if ($('input[type="number"]', $cartContainer).length) {
            $('input[type="number"]', $cartContainer).each(function () {
                var $el = $(this),
                    currentQty = $el.val();
                var itemAdd = currentQty + 1,
                    itemMinus = currentQty - 1,
                    itemQty = currentQty;
                var source = $("#velaAjaxQty").html(),
                    template = Handlebars.compile(source),
                    data = { id: $el.data("id"), itemQty: itemQty, itemAdd: itemAdd, itemMinus: itemMinus };
                $el.after(template(data)).remove();
            });
        }
    };
    qtySelectors = function () {
        var numInputs = $('input[type="number"]');
        if (numInputs.length) {
            numInputs.each(function () {
                var $el = $(this),
                    currentQty = $el.val(),
                    inputName = $el.attr("name"),
                    inputId = $el.attr("id");
                var itemAdd = currentQty + 1,
                    itemMinus = currentQty - 1,
                    itemQty = currentQty;
                var source = $("#velaJsQty").html(),
                    template = Handlebars.compile(source),
                    data = { id: $el.data("id"), itemQty: itemQty, itemAdd: itemAdd, itemMinus: itemMinus, inputName: inputName, inputId: inputId };
                $el.after(template(data)).remove();
            });
            $("body").on("click", ".velaQtyAdjust", function () {
                var $el = $(this),
                    id = $el.data("id"),
                    $qtySelector = $el.siblings(".velaQtyNum"),
                    qty = parseInt($qtySelector.val().replace(/\D/g, ""));
                var qty = validateQty(qty);
                if ($el.hasClass("velaQtyPlus")) {
                    qty += 1;
                } else {
                    qty -= 1;
                    if (qty <= 1) qty = 1;
                }
                $qtySelector.val(qty);
            });
        }
    };
    validateQty = function (qty) {
        if (parseFloat(qty) == parseInt(qty) && !isNaN(qty)) {
        } else {
            qty = 1;
        }
        return qty;
    };
  
  
  
    function updateWithConnectedProducts(line, indx, qty, callback) {

      const updatedItem = ShopifyCart.items[indx];

      if(!updatedItem.connectedProducts.items || !Object.keys(updatedItem.connectedProducts.items).length) return false;

      updateConnected(updatedItem.variant_id, updatedItem.connectedProducts.items, qty, callback)  ;

      
      return true;
    }

 
  
    function updateConnected(productId, items, qty, callback) {
           
      let finalQty = qty;
      let updates = {};
      updates[productId] = qty
      
      for(const item of items) {
        finalQty = item?.properties?._surcharge === 'perGroup' && qty > 0 ? 1 : qty;
        updates[item.variant_id] = finalQty
      }
        
      jQuery.post('/cart/update.js', {
          updates: updates
        },
        callback, "json"
      )
     
    }
  
  
    module = { init: init, load: loadCart };
    return module;
})(ajaxCart || {}, jQuery);
$(document).ready(function () {
    ajaxCart.init({ formSelector: ".formAddToCart", cartContainer: "#cartContainer", addToCartSelector: ".btnAddToCart", cartCountSelector: "#CartCount", cartCostSelector: "#CartCost", moneyFormat: window.money });
});



// Personalizer cart updates

function updateCartItemCount(cart) {
  
  console.log(1, cart);
  
  let groupedItems = {}
  
  for(const [i, item] of cart.items.entries()) {
    
    item.line = i + 1;  //remember the index of the full cart, before hidden items are removed. Needed to update the cart
   	if(item.properties._personalizer !== 'yes') continue;
    
    
    if(groupedItems[item.properties._builder_id] && item.properties._is_hidden) {
      groupedItems[item.properties._builder_id].items.push(item);
      groupedItems[item.properties._builder_id].connected_final_price += item.final_price;
      groupedItems[item.properties._builder_id].connected_original_price += item.original_price;
      groupedItems[item.properties._builder_id].line = i + 1;
    }
    else if(item.properties._is_hidden) {
      groupedItems[item.properties._builder_id] = {
        items: [item], 
        connected_final_price: item.final_price,
        connected_original_price: item.original_price
      }
    }
    else {
      groupedItems[item.properties._builder_id] = {
        items: [], connected_final_price: 0, connected_original_price: 0
      };
    }
   
  }
  
  let indx = 0;  // index in the updated cart
  const visibleItems = [];
  for(const [i, item] of cart.items.entries()) {
   	if(item.properties._personalizer !== 'yes') continue;
    
    if(item.properties._is_hidden) {
      continue;
    }
       
   
    item.indx = indx;
    item.final_price = groupedItems[item.properties._builder_id].connected_final_price + item.final_price;
    item.original_price = groupedItems[item.properties._builder_id].connected_original_price + item.original_price;
    item.connectedProducts = groupedItems[item.properties._builder_id] || [];    
    
    item.propertiesFull = Object.assign({}, item.properties);
   
    for(const propertyKey in item.properties) {
      if(propertyKey.startsWith('_')) {
       	delete item.properties[propertyKey] 
      }
    }

    visibleItems.push(item);
    
    indx ++;
  }

 
   cart.items = visibleItems;
  
}

