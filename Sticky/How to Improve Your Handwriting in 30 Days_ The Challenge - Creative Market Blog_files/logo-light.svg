<svg xmlns="http://www.w3.org/2000/svg" xmlns:v="https://vecta.io/nano" width="172" height="66" fill="none"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><path d="M16.524 25.428c1.656.408 2.928 1.176 3.816 2.304.912 1.104 1.368 2.508 1.368 4.212 0 1.008-.18 1.944-.54 2.808-.336.864-.852 1.62-1.548 2.268-.672.624-1.536 1.116-2.592 1.476-1.032.336-2.244.504-3.636.504H2.808V13.44h9.216c2.736 0 4.812.528 6.228 1.584s2.124 2.604 2.124 4.644c0 1.152-.288 2.256-.864 3.312s-1.572 1.86-2.988 2.412v.036zm-8.748-1.512h3.636c.504 0 .984-.06 1.44-.18.48-.12.888-.3 1.224-.54.36-.264.648-.576.864-.936.216-.384.324-.84.324-1.368 0-.912-.324-1.632-.972-2.16-.648-.552-1.716-.828-3.204-.828H7.776v6.012zm4.104 10.62c1.368 0 2.46-.264 3.276-.792.84-.528 1.26-1.344 1.26-2.448 0-1.008-.372-1.812-1.116-2.412s-1.872-.9-3.384-.9h-4.14v6.552h4.104zm23.744-13.392c.192 0 .312.012.36.036v5.112a7.23 7.23 0 0 0-.72-.036h-.504c-1.464 0-2.58.444-3.348 1.332-.768.864-1.152 1.944-1.152 3.24V39h-4.716V21.432h4.716v2.592h.036c.672-.936 1.464-1.644 2.376-2.124.912-.504 1.896-.756 2.952-.756zm19.584.288V39h-4.716v-2.16h-.072c-.672.816-1.464 1.428-2.376 1.836a6.73 6.73 0 0 1-2.844.612c-.936 0-1.8-.12-2.592-.36a5.17 5.17 0 0 1-2.052-1.26c-.576-.576-1.02-1.32-1.332-2.232-.312-.936-.468-2.076-.468-3.42V21.432h4.68v9.324c0 1.632.252 2.76.756 3.384s1.308.936 2.412.936c.504 0 .984-.108 1.44-.324a3.5 3.5 0 0 0 1.26-.972c.36-.432.648-.96.864-1.584.216-.648.324-1.392.324-2.232v-8.532h4.716zm10.301 17.856c-2.76 0-5.136-.852-7.128-2.556l2.304-3.276c.72.696 1.464 1.212 2.232 1.548.792.336 1.668.504 2.628.504.696 0 1.224-.132 1.584-.396.384-.264.576-.612.576-1.044 0-.408-.252-.744-.756-1.008-.48-.264-1.296-.576-2.448-.936a17.43 17.43 0 0 1-2.052-.828c-.648-.312-1.224-.684-1.728-1.116a5.09 5.09 0 0 1-1.188-1.584c-.288-.624-.432-1.356-.432-2.196 0-.792.156-1.512.468-2.16a5.27 5.27 0 0 1 1.332-1.656c.576-.456 1.248-.804 2.016-1.044.768-.264 1.608-.396 2.52-.396 1.224 0 2.34.18 3.348.54 1.032.336 2.052.888 3.06 1.656l-2.268 3.456c-.696-.648-1.416-1.116-2.16-1.404-.72-.312-1.404-.468-2.052-.468-.384 0-.768.108-1.152.324-.384.192-.576.528-.576 1.008 0 .36.228.684.684.972.456.264 1.116.564 1.98.9l2.556 1.008c.744.312 1.368.672 1.872 1.08.528.408.924.9 1.188 1.476.288.552.432 1.26.432 2.124 0 .792-.144 1.524-.432 2.196-.264.648-.684 1.224-1.26 1.728-.576.48-1.296.864-2.16 1.152-.84.264-1.836.396-2.988.396zM86.47 21.144c.936 0 1.8.132 2.592.396a5.17 5.17 0 0 1 2.052 1.26c.576.576 1.02 1.332 1.332 2.268.336.912.504 2.04.504 3.384V39h-4.716v-9.36c0-1.632-.288-2.748-.864-3.348-.576-.624-1.428-.936-2.556-.936-1.272 0-2.28.396-3.024 1.188-.744.768-1.116 1.944-1.116 3.528V39h-4.716V12.504h4.716v11.052h.072c.72-.816 1.572-1.416 2.556-1.8.984-.408 2.04-.612 3.168-.612zm30.83 18.144c-1.536 0-2.94-.24-4.212-.72-1.248-.48-2.328-1.176-3.24-2.088-.888-.936-1.584-2.076-2.088-3.42s-.756-2.892-.756-4.644V13.44h5.076v14.652c0 .912.108 1.764.324 2.556.24.792.576 1.476 1.008 2.052a5.06 5.06 0 0 0 1.656 1.368c.648.312 1.392.468 2.232.468 1.56 0 2.832-.564 3.816-1.692 1.008-1.128 1.512-2.712 1.512-4.752V13.44h5.076v14.976c0 1.656-.24 3.156-.72 4.5-.456 1.344-1.128 2.496-2.016 3.456-.888.936-1.98 1.656-3.276 2.16-1.272.504-2.736.756-4.392.756zm25.376-18.144c1.176 0 2.268.228 3.276.684 1.008.432 1.884 1.056 2.628 1.872s1.32 1.788 1.728 2.916c.432 1.104.648 2.316.648 3.636 0 1.368-.216 2.604-.648 3.708-.408 1.104-.984 2.052-1.728 2.844s-1.632 1.404-2.664 1.836-2.16.648-3.384.648c-1.128 0-2.124-.192-2.988-.576a6.83 6.83 0 0 1-2.196-1.692h-.072v9.108h-4.716V21.432h4.716v2.016h.072c1.344-1.536 3.12-2.304 5.328-2.304zm-1.008 13.932c1.344 0 2.424-.432 3.24-1.296.84-.888 1.26-2.052 1.26-3.492 0-.744-.12-1.416-.36-2.016-.216-.624-.528-1.152-.936-1.584s-.888-.756-1.44-.972c-.552-.24-1.14-.36-1.764-.36-.672 0-1.296.132-1.872.396-.552.24-1.032.588-1.44 1.044-.384.432-.696.948-.936 1.548-.216.6-.324 1.248-.324 1.944 0 .72.12 1.38.36 1.98.24.576.564 1.08.972 1.512.408.408.888.732 1.44.972.552.216 1.152.324 1.8.324z" fill="#fff"/><path fill-rule="evenodd" d="M167.508 12.663l-3.949 1.99c-.331.166-.658.497-.987.995l-1.975 3.979c-.329.498-1.152.498-1.316 0l-1.975-3.979c-.164-.332-.493-.663-.987-.995l-3.949-1.99c-.493-.332-.493-1.161 0-1.326l3.949-1.99c.329-.166.658-.497.987-.995l1.975-3.979c.329-.497 1.152-.497 1.316 0l1.975 3.979c.164.332.493.663.987.995l3.949 1.99c.656.332.656 1.161 0 1.326z" fill="#088178"/><path d="M6.279 57.665c.529.13.935.376 1.219.736.291.353.437.801.437 1.346a2.31 2.31 0 0 1-.173.897 1.94 1.94 0 0 1-.494.724c-.215.199-.491.356-.828.471-.33.107-.717.161-1.162.161H1.897v-8.165h2.944c.874 0 1.537.169 1.989.506s.679.832.679 1.483a2.18 2.18 0 0 1-.276 1.058c-.184.337-.502.594-.954.77v.011zm-2.794-.483h1.162a1.8 1.8 0 0 0 .46-.057 1.14 1.14 0 0 0 .391-.172 1.02 1.02 0 0 0 .276-.299c.069-.123.104-.268.104-.437 0-.291-.104-.521-.311-.69-.207-.176-.548-.264-1.024-.264H3.484v1.92zm1.311 3.392c.437 0 .786-.084 1.047-.253.268-.169.402-.429.402-.782 0-.322-.119-.579-.356-.77s-.598-.288-1.081-.288H3.484v2.093h1.311zm12.113-6.739l-2.726 4.577V62H12.55v-3.588l-2.703-4.577h1.852l1.667 2.978h.023l1.644-2.978h1.875zm10.849 8.246c-.56 0-1.093-.088-1.599-.264-.498-.184-.939-.449-1.322-.794-.376-.353-.678-.786-.909-1.3-.222-.514-.334-1.108-.334-1.782a4.84 4.84 0 0 1 .276-1.645 3.79 3.79 0 0 1 .805-1.334 3.65 3.65 0 0 1 1.299-.897c.521-.222 1.116-.334 1.783-.334a4.34 4.34 0 0 1 1.713.368c.575.245 1.089.644 1.541 1.196l-1.184 1.012c-.245-.284-.544-.525-.897-.724-.353-.207-.744-.31-1.173-.31-.353 0-.682.065-.989.196a2.28 2.28 0 0 0-.782.529c-.215.23-.387.51-.517.84-.123.33-.184.698-.184 1.104 0 .383.058.736.172 1.058a2.53 2.53 0 0 0 .506.816 2.42 2.42 0 0 0 .782.541 2.56 2.56 0 0 0 1.012.196c.429 0 .82-.096 1.173-.288.353-.199.652-.449.897-.748l1.185 1.023c-.353.437-.801.805-1.346 1.104-.544.291-1.181.437-1.909.437zM38.142 62l-1.829-2.794h-.943V62h-1.599v-8.165h3.093c.491 0 .912.069 1.265.207.36.138.656.33.886.575.238.238.41.521.517.851.115.33.173.69.173 1.081 0 .659-.15 1.192-.449 1.599-.291.399-.702.686-1.23.862L40.051 62h-1.909zm-2.772-4.221h1.127c.506 0 .889-.115 1.15-.345s.391-.537.391-.92c0-.376-.127-.675-.38-.897-.253-.23-.617-.345-1.093-.345h-1.196v2.507zm7.46-3.944h5.221v1.449h-3.634v1.955h2.91v1.426h-2.91v1.898h3.876V62H42.83v-8.165zm13.099 6.532H52.79L52.238 62h-1.69l3.024-8.165h1.553L58.172 62h-1.69l-.552-1.633zm-.471-1.38l-1.093-3.209h-.023l-1.081 3.209h2.197zm6.303-3.703h-2.254v-1.449h6.13v1.449h-2.266V62h-1.61v-6.716zm6.662-1.449h1.621V62h-1.621v-8.165zm11.811 0L77.209 62h-1.426l-3.036-8.165h1.76l1.978 5.865h.023l1.99-5.865h1.736zm2.62 0h5.221v1.449h-3.634v1.955h2.909v1.426h-2.909v1.898h3.876V62h-5.463v-8.165zm21.197 0V62h-1.598v-5.071h-.023l-1.99 3.519h-1.046l-1.989-3.519h-.023V62h-1.61v-8.165h1.633l2.507 4.646h.023l2.496-4.646h1.621zm7.997 6.532h-3.139L108.356 62h-1.691l3.025-8.165h1.552L114.29 62h-1.691l-.552-1.633zm-.471-1.38l-1.093-3.209h-.023l-1.081 3.209h2.197zM121.244 62l-1.829-2.794h-.943V62h-1.598v-8.165h3.093c.491 0 .912.069 1.265.207a2.34 2.34 0 0 1 .886.575 2.11 2.11 0 0 1 .517.851c.115.33.173.69.173 1.081 0 .659-.15 1.192-.449 1.599-.291.399-.701.686-1.23.862l2.024 2.99h-1.909zm-2.772-4.221h1.127c.506 0 .889-.115 1.15-.345s.391-.537.391-.92c0-.376-.126-.675-.379-.897-.253-.23-.618-.345-1.093-.345h-1.196v2.507zm9.875.943l-.805.955V62h-1.61v-8.165h1.61v3.599h.011l2.829-3.599h2.047l-3.013 3.599L132.521 62h-1.989l-2.174-3.278h-.011zm6.744-4.887h5.221v1.449h-3.634v1.955h2.909v1.426h-2.909v1.898h3.875V62h-5.462v-8.165zm10.086 1.449h-2.254v-1.449h6.129v1.449h-2.265V62h-1.61v-6.716z" fill="#fff"/></svg>