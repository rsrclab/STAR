<svg xmlns="http://www.w3.org/2000/svg" xmlns:v="https://vecta.io/nano" width="69" height="25" fill="#343a3d"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><path d="M21.22 20.299h-.718c-.033 0-.098.033-.131.065l-1.306 2.155c-.065.065-.098.065-.163 0l-1.241-2.155c-.033-.033-.065-.065-.13-.065h-.718c-.098 0-.163.065-.163.163v4.342c0 .098.065.163.163.163h.718c.098 0 .163-.065.163-.163v-2.22c0-.131.131-.196.228-.098l.979 1.6c.065.065.163.065.229 0l1.012-1.6c.098-.098.229-.065.229.098v2.22c0 .098.065.163.163.163h.686c.098 0 .163-.065.163-.163v-4.342c-.033-.098-.098-.163-.163-.163zm5.42.098c-.033-.065-.065-.098-.131-.098h-.751c-.065 0-.098.033-.131.098l-1.926 4.342c-.033.098.033.196.131.196h.784c.065 0 .131-.033.131-.098l.294-.718c.033-.065.065-.098.131-.098h1.959c.065 0 .131.033.131.098l.294.718c.033.065.065.098.131.098h.751c.098 0 .163-.098.131-.196l-1.926-4.342zm0 2.71h-.979c-.098 0-.163-.098-.131-.196l.49-1.241c.065-.131.229-.131.261 0l.49 1.241c.033.098-.033.196-.131.196zm13.287-.686c-.033-.065-.033-.131 0-.163l1.404-1.698c.065-.098 0-.229-.098-.229h-.784c-.033 0-.098.033-.098.065l-1.567 1.959c-.098.098-.261.033-.261-.098v-1.796c0-.065-.065-.131-.131-.131h-.686c-.065 0-.131.065-.131.131v4.342c0 .065.065.131.131.131h.686c.065 0 .131-.065.131-.131v-.751c0-.033 0-.065.033-.098l.588-.718c.065-.065.163-.065.229 0l1.143 1.632c.033.033.065.065.131.065h.849c.131 0 .196-.131.131-.229l-1.698-2.285zm7.509 1.6h-2.187c-.098 0-.163-.065-.163-.163v-.686c0-.098.065-.163.163-.163h1.469c.098 0 .163-.065.163-.163v-.522c0-.098-.065-.163-.163-.163h-1.469c-.098 0-.163-.065-.163-.163v-.653c0-.098.065-.163.163-.163h2.024c.098 0 .163-.065.163-.163v-.555c0-.098-.065-.163-.163-.163h-3.036c-.098 0-.163.065-.163.163v4.309c0 .098.065.163.163.163h3.167c.098 0 .163-.065.163-.163v-.555c.033-.098-.033-.196-.131-.196zm6.202-3.722h-3.689c-.065 0-.163.065-.163.163v.588c0 .065.065.163.163.163h1.208c.065 0 .163.065.163.163v3.46c0 .065.065.163.163.163h.685c.065 0 .163-.065.163-.163v-3.46c0-.065.065-.163.163-.163h1.208c.065 0 .163-.065.163-.163v-.588c-.065-.098-.131-.163-.229-.163zm-18.837 1.73c0-1.012-.783-1.73-2.089-1.73l-1.469.033c-.065 0-.163.065-.163.163v4.342c0 .065.065.163.163.163h.686c.065 0 .163-.065.163-.163v-.914c0-.131.033-.163.163-.163h.653c.163 0 .196 0 .261.065l.522 1.045c.033.065.065.065.131.065h.816c.098 0 .196-.131.131-.229l-.62-1.208c-.033-.065 0-.131.065-.196.326-.261.588-.686.588-1.273zm-1.991.784h-.555c-.065 0-.131-.065-.131-.163v-1.371c0-.065.065-.163.163-.163h.522c.588.033 1.045.294 1.045.816-.033.522-.359.849-1.045.881zm34.769-10.251c-.065.065-.653 3.559-3.134 3.559-.979 0-1.665-.718-2.089-1.6 3.069-.686 4.081-3.101 4.081-4.734 0-1.926-1.371-2.612-2.514-2.612-1.894 0-4.375 1.763-4.375 5.223 0 .326.033.62.065.914-.653-.196-1.241-.555-1.632-1.143.555-2.546.457-4.995-.718-4.995-.653 0-1.24.881-1.24 2.775 0 .751.196 1.6.588 2.351-.228 1.143-1.077 3.983-2.122 3.983-1.469 0-1.012-6.954-1.012-7.966 0-.849-2.024-1.73-2.481-1.273-.196.196-.229 1.339-.229 2.775a21.16 21.16 0 0 0 .359 3.95c-.131.718-.751 2.546-1.861 2.546-1.73 0-.849-6.595-.849-7.639 0-.751-1.959-1.469-2.416-.979-.196.196-.326 1.534-.326 3.591a24.42 24.42 0 0 0 .163 2.644c-.196.914-.914 2.383-2.089 2.383-1.861 0-1.045-7.215-.555-11.655.294-.065.62-.098.947-.131.816-.098 1.828-.261 1.828.261 0 1.175.783 1.534 1.338 1.534.62 0 1.208-.49 1.208-1.436s-.816-1.828-2.253-1.828a16.79 16.79 0 0 0-2.873.261c.065-.751.131-1.339.131-1.698 0-.979-2.024-1.926-2.449-1.534-.065.065-.359 1.632-.588 3.787-1.404.294-2.808.522-4.179.522-.49 0-.424 1.436 1.208 1.436.947 0 1.861-.196 2.84-.457a56.02 56.02 0 0 0-.229 4.766c0 1.436.098 2.71.261 3.754-.196.784-.751 2.416-1.828 2.416-2.057 0-1.077-7.084-1.077-8.129 0-.49-1.861-1.6-2.253-1.208-.065.065-.098.359-.098.359s-.261-.196-.947-.196c-2.612 0-4.701 3.232-4.701 6.17v.424c-.392.947-1.436 2.579-3.297 2.579-.914 0-1.6-.62-2.057-1.404 2.873-.816 4.015-3.33 4.015-4.93 0-1.894-1.6-2.808-2.775-2.808-2.024 0-4.244 2.024-4.244 5.452 0 .979.196 1.861.522 2.579-.359.588-.914 1.143-1.665 1.143-2.089 0-.686-7.052-.686-7.803 0-.196 0-.522-.326-.784-.424-.294-2.971-.653-3.82-.816v-.522c0-1.371-.849-1.665-1.404-1.665-.914 0-1.11 1.045-1.11 1.306a1.88 1.88 0 0 0 1.012 1.665c0 2.546-1.632 8.521-5.974 8.521-3.265 0-4.473-3.363-4.473-5.909 0-4.244 2.481-7.509 4.081-7.509 2.024 0 .229 3.885 2.253 3.885 1.436 0 1.632-1.371 1.632-2.024 0-1.175-1.241-3.395-3.852-3.395C3.101 1.299 0 6.391 0 10.799c0 4.211 2.906 7.607 6.954 7.607 6.268 0 7.835-6.66 8.162-10.382.392.131 1.404.294 1.502.392.163.163-.326 2.416-.326 4.603 0 2.71.881 4.897 3.036 4.897 1.338 0 2.416-.979 3.004-1.73.881 1.11 2.122 1.698 3.363 1.698 2.122 0 3.493-1.306 4.211-2.383.588 1.6 1.796 2.383 2.873 2.383 1.534 0 2.449-2.057 2.481-2.383.457 1.436 1.534 2.416 2.742 2.416 1.534 0 2.448-1.404 2.84-2.253.555 1.469 1.404 2.253 2.677 2.253 1.436 0 2.383-1.306 2.808-2.187.457 1.273 1.208 2.187 2.383 2.187 1.6 0 2.612-1.632 2.938-2.481.522 1.404 1.339 2.416 2.612 2.416 1.404 0 2.644-2.024 3.363-4.309a4.19 4.19 0 0 0 2.318 1.11c.718 2.057 2.383 3.199 4.146 3.199 3.069 0 4.244-3.134 4.375-3.885.065-.751-.653-1.665-.881-1.404zM25.301 8.089c1.273 0 .522 4.864-1.567 5.68-.163-.522-.229-1.012-.229-1.404-.033-1.632.62-4.277 1.796-4.277zm7.737 7.77c-2.22 0-.686-7.737 1.143-7.737 1.208 0 1.012 7.737-1.143 7.737zm30.59-7.705c1.241 0 .522 5.028-1.632 5.354-.098-.424-.163-.816-.163-1.143 0-1.632.62-4.211 1.796-4.211z"/></svg>